
private boolean approxEqual(double value0, double value1, double tolerance, double offset) {
	return value0 < value1 * tolerance + offset && value1 < value0 * tolerance + offset;
}




Feature f0 = features.get(j);
Feature f1 = features.get(k);

// Vector2D dir =
// f0.position().sub(f1.position()).normalize();

/*
 * double dAngle = Math.abs(Math.acos(dir.x) - angle); if
 * (dAngle > maxVariance && Math.PI - dAngle > maxVariance)
 * { continue; }
 */

LinkedFeature lf = LinkedFeature.create(Arrays.asList(f0, f1));
if(lf.area()-f0.area()-f1.area() < 1000) {
	//cvDrawLine(img, f0.cvPosition(), f1.cvPosition(), CvScalar.BLACK, 2,
	//		0, 0);

	adjacencyList.get(f0).add(f1);
	adjacencyList.get(f1).add(f0);
	continue;
}

double dPos = f0.distance(f1);
if (dPos > maxDistance) {
	continue;
}

Angle180 angle = new Angle180(f0.position(), f1.position());

double diff0 = angle.difference(f0.angle()).absRadians();
double diff1 = angle.difference(f1.angle()).absRadians();

double size0 = angle.difference(f0.angle()).absRadians() < Angle180
		.degToRad(45) ? f0.height() : f0.width();
double size1 = angle.difference(f1.angle()).absRadians() < Angle180
		.degToRad(45) ? f1.height() : f1.width();

CvScalar color = CvScalar.BLACK;

// 45
int a = 10;
if (diff0 > Angle180.degToRad(a)
		&& diff0 < Angle180.degToRad(90 - a)
		|| diff1 > Angle180.degToRad(a)
		&& diff1 < Angle180.degToRad(90 - a)) {
	color = CvScalar.BLACK;
	continue;
} else if (approxEqual(size0, size1, 1.3, 3)) {
	color = CvScalar.BLUE;
	// continue;
} else {
	continue;
}

/*cvDrawLine(img, f0.cvPosition(), f1.cvPosition(), color, 2,
		0, 0);
// cvShowImage("", img);
// cvWaitKey();

adjacencyList.get(f0).add(f1);
adjacencyList.get(f1).add(f0);*/